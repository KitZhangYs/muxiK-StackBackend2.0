// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	evaluationReportFieldNames          = builder.RawFieldNames(&EvaluationReport{})
	evaluationReportRows                = strings.Join(evaluationReportFieldNames, ",")
	evaluationReportRowsExpectAutoSet   = strings.Join(stringx.Remove(evaluationReportFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	evaluationReportRowsWithPlaceHolder = strings.Join(stringx.Remove(evaluationReportFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	evaluationReportModel interface {
		Insert(ctx context.Context, data *EvaluationReport) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*EvaluationReport, error)
		FindOneById(ctx context.Context, id int64) (*EvaluationReport, error)
		Update(ctx context.Context, data *EvaluationReport) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEvaluationReportModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EvaluationReport struct {
		Id     int64          `db:"id"`
		Pid    string         `db:"pid"`
		Sid    string         `db:"sid"`
		Reason sql.NullString `db:"reason"` // 举报原因
		Status sql.NullInt64  `db:"status"` // 处理状态
	}
)

func newEvaluationReportModel(conn sqlx.SqlConn) *defaultEvaluationReportModel {
	return &defaultEvaluationReportModel{
		conn:  conn,
		table: "`evaluation_report`",
	}
}

func (m *defaultEvaluationReportModel) withSession(session sqlx.Session) *defaultEvaluationReportModel {
	return &defaultEvaluationReportModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`evaluation_report`",
	}
}

func (m *defaultEvaluationReportModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEvaluationReportModel) FindOne(ctx context.Context, id int64) (*EvaluationReport, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", evaluationReportRows, m.table)
	var resp EvaluationReport
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEvaluationReportModel) FindOneById(ctx context.Context, id int64) (*EvaluationReport, error) {
	var resp EvaluationReport
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", evaluationReportRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEvaluationReportModel) Insert(ctx context.Context, data *EvaluationReport) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, evaluationReportRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Pid, data.Sid, data.Reason, data.Status)
	return ret, err
}

func (m *defaultEvaluationReportModel) Update(ctx context.Context, newData *EvaluationReport) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, evaluationReportRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Pid, newData.Sid, newData.Reason, newData.Status, newData.Id)
	return err
}

func (m *defaultEvaluationReportModel) tableName() string {
	return m.table
}
