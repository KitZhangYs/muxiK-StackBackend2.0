// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.11
// source: curriculacenter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Curriculacenter_AddCurricula_FullMethodName = "/pb.curriculacenter/addCurricula"
)

// CurriculacenterClient is the client API for Curriculacenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurriculacenterClient interface {
	AddCurricula(ctx context.Context, in *AddCurriculaRequest, opts ...grpc.CallOption) (*AddCurriculaResponse, error)
}

type curriculacenterClient struct {
	cc grpc.ClientConnInterface
}

func NewCurriculacenterClient(cc grpc.ClientConnInterface) CurriculacenterClient {
	return &curriculacenterClient{cc}
}

func (c *curriculacenterClient) AddCurricula(ctx context.Context, in *AddCurriculaRequest, opts ...grpc.CallOption) (*AddCurriculaResponse, error) {
	out := new(AddCurriculaResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_AddCurricula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurriculacenterServer is the server API for Curriculacenter service.
// All implementations must embed UnimplementedCurriculacenterServer
// for forward compatibility
type CurriculacenterServer interface {
	AddCurricula(context.Context, *AddCurriculaRequest) (*AddCurriculaResponse, error)
	mustEmbedUnimplementedCurriculacenterServer()
}

// UnimplementedCurriculacenterServer must be embedded to have forward compatible implementations.
type UnimplementedCurriculacenterServer struct {
}

func (UnimplementedCurriculacenterServer) AddCurricula(context.Context, *AddCurriculaRequest) (*AddCurriculaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCurricula not implemented")
}
func (UnimplementedCurriculacenterServer) mustEmbedUnimplementedCurriculacenterServer() {}

// UnsafeCurriculacenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurriculacenterServer will
// result in compilation errors.
type UnsafeCurriculacenterServer interface {
	mustEmbedUnimplementedCurriculacenterServer()
}

func RegisterCurriculacenterServer(s grpc.ServiceRegistrar, srv CurriculacenterServer) {
	s.RegisterService(&Curriculacenter_ServiceDesc, srv)
}

func _Curriculacenter_AddCurricula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCurriculaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).AddCurricula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_AddCurricula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).AddCurricula(ctx, req.(*AddCurriculaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Curriculacenter_ServiceDesc is the grpc.ServiceDesc for Curriculacenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Curriculacenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.curriculacenter",
	HandlerType: (*CurriculacenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addCurricula",
			Handler:    _Curriculacenter_AddCurricula_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "curriculacenter.proto",
}
