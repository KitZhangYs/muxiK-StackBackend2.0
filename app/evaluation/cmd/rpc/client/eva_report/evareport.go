// Code generated by goctl. DO NOT EDIT.
// Source: evaluation.proto

package eva_report

import (
	"context"

	"github.com/MuxiKeStack/muxiK-StackBackend2.0/app/evaluation/cmd/rpc/pb/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateEvaluationRequest = pb.CreateEvaluationRequest
	DeleteEvaluationRequest = pb.DeleteEvaluationRequest
	Evaluation              = pb.Evaluation
	EvaluationResponse      = pb.EvaluationResponse
	GetEvaluationRequest    = pb.GetEvaluationRequest
	GetLikeRequest          = pb.GetLikeRequest
	GetLikeResponse         = pb.GetLikeResponse
	GetReportsRequest       = pb.GetReportsRequest
	GetReportsResponse      = pb.GetReportsResponse
	GetTheReportRequest     = pb.GetTheReportRequest
	GetTheReportResponse    = pb.GetTheReportResponse
	Like                    = pb.Like
	Report                  = pb.Report
	SendReportRequest       = pb.SendReportRequest
	SetLikeRequest          = pb.SetLikeRequest
	SetReportRequest        = pb.SetReportRequest
	StatusResponse          = pb.StatusResponse
	UpdateEvaluationRequest = pb.UpdateEvaluationRequest

	EvaReport interface {
		SendReport(ctx context.Context, in *SendReportRequest, opts ...grpc.CallOption) (*StatusResponse, error)
		GetReports(ctx context.Context, in *GetReportsRequest, opts ...grpc.CallOption) (*GetReportsResponse, error)
		GetTheReport(ctx context.Context, in *GetTheReportRequest, opts ...grpc.CallOption) (*GetTheReportResponse, error)
		SetReport(ctx context.Context, in *SetReportRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	}

	defaultEvaReport struct {
		cli zrpc.Client
	}
)

func NewEvaReport(cli zrpc.Client) EvaReport {
	return &defaultEvaReport{
		cli: cli,
	}
}

func (m *defaultEvaReport) SendReport(ctx context.Context, in *SendReportRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	client := pb.NewEvaReportClient(m.cli.Conn())
	return client.SendReport(ctx, in, opts...)
}

func (m *defaultEvaReport) GetReports(ctx context.Context, in *GetReportsRequest, opts ...grpc.CallOption) (*GetReportsResponse, error) {
	client := pb.NewEvaReportClient(m.cli.Conn())
	return client.GetReports(ctx, in, opts...)
}

func (m *defaultEvaReport) GetTheReport(ctx context.Context, in *GetTheReportRequest, opts ...grpc.CallOption) (*GetTheReportResponse, error) {
	client := pb.NewEvaReportClient(m.cli.Conn())
	return client.GetTheReport(ctx, in, opts...)
}

func (m *defaultEvaReport) SetReport(ctx context.Context, in *SetReportRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	client := pb.NewEvaReportClient(m.cli.Conn())
	return client.SetReport(ctx, in, opts...)
}
