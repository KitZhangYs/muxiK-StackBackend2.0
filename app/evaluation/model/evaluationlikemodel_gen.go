// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	evaluationLikeFieldNames          = builder.RawFieldNames(&EvaluationLike{})
	evaluationLikeRows                = strings.Join(evaluationLikeFieldNames, ",")
	evaluationLikeRowsExpectAutoSet   = strings.Join(stringx.Remove(evaluationLikeFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	evaluationLikeRowsWithPlaceHolder = strings.Join(stringx.Remove(evaluationLikeFieldNames, "`pid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	evaluationLikeModel interface {
		Insert(ctx context.Context, data *EvaluationLike) (sql.Result, error)
		FindOne(ctx context.Context, pid int64) (*EvaluationLike, error)
		Update(ctx context.Context, data *EvaluationLike) error
		Delete(ctx context.Context, pid int64) error
	}

	defaultEvaluationLikeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EvaluationLike struct {
		Pid    int64  `db:"pid"`
		Sid    string `db:"sid"`
		Status int64  `db:"status"` // "like:1, nothing:0, dislike:-1 "
	}
)

func newEvaluationLikeModel(conn sqlx.SqlConn) *defaultEvaluationLikeModel {
	return &defaultEvaluationLikeModel{
		conn:  conn,
		table: "`evaluation_like`",
	}
}

func (m *defaultEvaluationLikeModel) withSession(session sqlx.Session) *defaultEvaluationLikeModel {
	return &defaultEvaluationLikeModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`evaluation_like`",
	}
}

func (m *defaultEvaluationLikeModel) Delete(ctx context.Context, pid int64) error {
	query := fmt.Sprintf("delete from %s where `pid` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, pid)
	return err
}

func (m *defaultEvaluationLikeModel) FindOne(ctx context.Context, pid int64) (*EvaluationLike, error) {
	query := fmt.Sprintf("select %s from %s where `pid` = ? limit 1", evaluationLikeRows, m.table)
	var resp EvaluationLike
	err := m.conn.QueryRowCtx(ctx, &resp, query, pid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEvaluationLikeModel) Insert(ctx context.Context, data *EvaluationLike) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, evaluationLikeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Pid, data.Sid, data.Status)
	return ret, err
}

func (m *defaultEvaluationLikeModel) Update(ctx context.Context, data *EvaluationLike) error {
	query := fmt.Sprintf("update %s set %s where `pid` = ?", m.table, evaluationLikeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Sid, data.Status, data.Pid)
	return err
}

func (m *defaultEvaluationLikeModel) tableName() string {
	return m.table
}
