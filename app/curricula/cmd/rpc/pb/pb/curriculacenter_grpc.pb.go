// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/pb/curriculacenter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Curriculacenter_AddCurricula_FullMethodName         = "/pb.curriculacenter/addCurricula"
	Curriculacenter_DeleteCurricula_FullMethodName      = "/pb.curriculacenter/deleteCurricula"
	Curriculacenter_UpdateCurricula_FullMethodName      = "/pb.curriculacenter/updateCurricula"
	Curriculacenter_SearchCurricula_FullMethodName      = "/pb.curriculacenter/searchCurricula"
	Curriculacenter_CurriculumDetail_FullMethodName     = "/pb.curriculacenter/curriculumDetail"
	Curriculacenter_CheckCharacteristics_FullMethodName = "/pb.curriculacenter/checkCharacteristics"
	Curriculacenter_CollectCurriculum_FullMethodName    = "/pb.curriculacenter/collectCurriculum"
	Curriculacenter_DeleteCollection_FullMethodName     = "/pb.curriculacenter/deleteCollection"
	Curriculacenter_RandomCurricula_FullMethodName      = "/pb.curriculacenter/randomCurricula"
)

// CurriculacenterClient is the client API for Curriculacenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurriculacenterClient interface {
	AddCurricula(ctx context.Context, in *AddCurriculaRequest, opts ...grpc.CallOption) (*AddCurriculaResponse, error)
	DeleteCurricula(ctx context.Context, in *DeleteCurriculaRequest, opts ...grpc.CallOption) (*DeleteCurriculaResponse, error)
	UpdateCurricula(ctx context.Context, in *UpdateCurriculaRequest, opts ...grpc.CallOption) (*UpdateCurriculaResponse, error)
	SearchCurricula(ctx context.Context, in *SearchCurriculaRequest, opts ...grpc.CallOption) (*SearchCurriculaResponse, error)
	CurriculumDetail(ctx context.Context, in *CurriculumDetailRequest, opts ...grpc.CallOption) (*CurriculumDetailResponse, error)
	CheckCharacteristics(ctx context.Context, in *CheckCharacteristicsRequest, opts ...grpc.CallOption) (*CheckCharacteristicsResponse, error)
	CollectCurriculum(ctx context.Context, in *CollectCurriculumRequest, opts ...grpc.CallOption) (*CollectCurriculumResponse, error)
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error)
	RandomCurricula(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*RandomResponse, error)
}

type curriculacenterClient struct {
	cc grpc.ClientConnInterface
}

func NewCurriculacenterClient(cc grpc.ClientConnInterface) CurriculacenterClient {
	return &curriculacenterClient{cc}
}

func (c *curriculacenterClient) AddCurricula(ctx context.Context, in *AddCurriculaRequest, opts ...grpc.CallOption) (*AddCurriculaResponse, error) {
	out := new(AddCurriculaResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_AddCurricula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curriculacenterClient) DeleteCurricula(ctx context.Context, in *DeleteCurriculaRequest, opts ...grpc.CallOption) (*DeleteCurriculaResponse, error) {
	out := new(DeleteCurriculaResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_DeleteCurricula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curriculacenterClient) UpdateCurricula(ctx context.Context, in *UpdateCurriculaRequest, opts ...grpc.CallOption) (*UpdateCurriculaResponse, error) {
	out := new(UpdateCurriculaResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_UpdateCurricula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curriculacenterClient) SearchCurricula(ctx context.Context, in *SearchCurriculaRequest, opts ...grpc.CallOption) (*SearchCurriculaResponse, error) {
	out := new(SearchCurriculaResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_SearchCurricula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curriculacenterClient) CurriculumDetail(ctx context.Context, in *CurriculumDetailRequest, opts ...grpc.CallOption) (*CurriculumDetailResponse, error) {
	out := new(CurriculumDetailResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_CurriculumDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curriculacenterClient) CheckCharacteristics(ctx context.Context, in *CheckCharacteristicsRequest, opts ...grpc.CallOption) (*CheckCharacteristicsResponse, error) {
	out := new(CheckCharacteristicsResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_CheckCharacteristics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curriculacenterClient) CollectCurriculum(ctx context.Context, in *CollectCurriculumRequest, opts ...grpc.CallOption) (*CollectCurriculumResponse, error) {
	out := new(CollectCurriculumResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_CollectCurriculum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curriculacenterClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error) {
	out := new(DeleteCollectionResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_DeleteCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curriculacenterClient) RandomCurricula(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*RandomResponse, error) {
	out := new(RandomResponse)
	err := c.cc.Invoke(ctx, Curriculacenter_RandomCurricula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurriculacenterServer is the server API for Curriculacenter service.
// All implementations must embed UnimplementedCurriculacenterServer
// for forward compatibility
type CurriculacenterServer interface {
	AddCurricula(context.Context, *AddCurriculaRequest) (*AddCurriculaResponse, error)
	DeleteCurricula(context.Context, *DeleteCurriculaRequest) (*DeleteCurriculaResponse, error)
	UpdateCurricula(context.Context, *UpdateCurriculaRequest) (*UpdateCurriculaResponse, error)
	SearchCurricula(context.Context, *SearchCurriculaRequest) (*SearchCurriculaResponse, error)
	CurriculumDetail(context.Context, *CurriculumDetailRequest) (*CurriculumDetailResponse, error)
	CheckCharacteristics(context.Context, *CheckCharacteristicsRequest) (*CheckCharacteristicsResponse, error)
	CollectCurriculum(context.Context, *CollectCurriculumRequest) (*CollectCurriculumResponse, error)
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error)
	RandomCurricula(context.Context, *RandomRequest) (*RandomResponse, error)
	mustEmbedUnimplementedCurriculacenterServer()
}

// UnimplementedCurriculacenterServer must be embedded to have forward compatible implementations.
type UnimplementedCurriculacenterServer struct {
}

func (UnimplementedCurriculacenterServer) AddCurricula(context.Context, *AddCurriculaRequest) (*AddCurriculaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCurricula not implemented")
}
func (UnimplementedCurriculacenterServer) DeleteCurricula(context.Context, *DeleteCurriculaRequest) (*DeleteCurriculaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurricula not implemented")
}
func (UnimplementedCurriculacenterServer) UpdateCurricula(context.Context, *UpdateCurriculaRequest) (*UpdateCurriculaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurricula not implemented")
}
func (UnimplementedCurriculacenterServer) SearchCurricula(context.Context, *SearchCurriculaRequest) (*SearchCurriculaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCurricula not implemented")
}
func (UnimplementedCurriculacenterServer) CurriculumDetail(context.Context, *CurriculumDetailRequest) (*CurriculumDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurriculumDetail not implemented")
}
func (UnimplementedCurriculacenterServer) CheckCharacteristics(context.Context, *CheckCharacteristicsRequest) (*CheckCharacteristicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCharacteristics not implemented")
}
func (UnimplementedCurriculacenterServer) CollectCurriculum(context.Context, *CollectCurriculumRequest) (*CollectCurriculumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectCurriculum not implemented")
}
func (UnimplementedCurriculacenterServer) DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedCurriculacenterServer) RandomCurricula(context.Context, *RandomRequest) (*RandomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomCurricula not implemented")
}
func (UnimplementedCurriculacenterServer) mustEmbedUnimplementedCurriculacenterServer() {}

// UnsafeCurriculacenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurriculacenterServer will
// result in compilation errors.
type UnsafeCurriculacenterServer interface {
	mustEmbedUnimplementedCurriculacenterServer()
}

func RegisterCurriculacenterServer(s grpc.ServiceRegistrar, srv CurriculacenterServer) {
	s.RegisterService(&Curriculacenter_ServiceDesc, srv)
}

func _Curriculacenter_AddCurricula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCurriculaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).AddCurricula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_AddCurricula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).AddCurricula(ctx, req.(*AddCurriculaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curriculacenter_DeleteCurricula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurriculaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).DeleteCurricula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_DeleteCurricula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).DeleteCurricula(ctx, req.(*DeleteCurriculaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curriculacenter_UpdateCurricula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurriculaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).UpdateCurricula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_UpdateCurricula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).UpdateCurricula(ctx, req.(*UpdateCurriculaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curriculacenter_SearchCurricula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCurriculaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).SearchCurricula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_SearchCurricula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).SearchCurricula(ctx, req.(*SearchCurriculaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curriculacenter_CurriculumDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurriculumDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).CurriculumDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_CurriculumDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).CurriculumDetail(ctx, req.(*CurriculumDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curriculacenter_CheckCharacteristics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCharacteristicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).CheckCharacteristics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_CheckCharacteristics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).CheckCharacteristics(ctx, req.(*CheckCharacteristicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curriculacenter_CollectCurriculum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectCurriculumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).CollectCurriculum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_CollectCurriculum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).CollectCurriculum(ctx, req.(*CollectCurriculumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curriculacenter_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Curriculacenter_RandomCurricula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurriculacenterServer).RandomCurricula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Curriculacenter_RandomCurricula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurriculacenterServer).RandomCurricula(ctx, req.(*RandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Curriculacenter_ServiceDesc is the grpc.ServiceDesc for Curriculacenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Curriculacenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.curriculacenter",
	HandlerType: (*CurriculacenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addCurricula",
			Handler:    _Curriculacenter_AddCurricula_Handler,
		},
		{
			MethodName: "deleteCurricula",
			Handler:    _Curriculacenter_DeleteCurricula_Handler,
		},
		{
			MethodName: "updateCurricula",
			Handler:    _Curriculacenter_UpdateCurricula_Handler,
		},
		{
			MethodName: "searchCurricula",
			Handler:    _Curriculacenter_SearchCurricula_Handler,
		},
		{
			MethodName: "curriculumDetail",
			Handler:    _Curriculacenter_CurriculumDetail_Handler,
		},
		{
			MethodName: "checkCharacteristics",
			Handler:    _Curriculacenter_CheckCharacteristics_Handler,
		},
		{
			MethodName: "collectCurriculum",
			Handler:    _Curriculacenter_CollectCurriculum_Handler,
		},
		{
			MethodName: "deleteCollection",
			Handler:    _Curriculacenter_DeleteCollection_Handler,
		},
		{
			MethodName: "randomCurricula",
			Handler:    _Curriculacenter_RandomCurricula_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb/curriculacenter.proto",
}
