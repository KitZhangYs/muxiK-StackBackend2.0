// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	officialMessageFieldNames          = builder.RawFieldNames(&OfficialMessage{})
	officialMessageRows                = strings.Join(officialMessageFieldNames, ",")
	officialMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(officialMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	officialMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(officialMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	officialMessageModel interface {
		Insert(ctx context.Context, data *OfficialMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OfficialMessage, error)
		Update(ctx context.Context, data *OfficialMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOfficialMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OfficialMessage struct {
		Id        int64          `db:"id"`
		Title     string         `db:"title"`
		Text      string         `db:"text"`
		Image     sql.NullString `db:"image"`
		ObjectSid sql.NullString `db:"object_sid"`
		SendAt    int64          `db:"send_at"`
	}
)

func newOfficialMessageModel(conn sqlx.SqlConn) *defaultOfficialMessageModel {
	return &defaultOfficialMessageModel{
		conn:  conn,
		table: "`official_message`",
	}
}

func (m *defaultOfficialMessageModel) withSession(session sqlx.Session) *defaultOfficialMessageModel {
	return &defaultOfficialMessageModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`official_message`",
	}
}

func (m *defaultOfficialMessageModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOfficialMessageModel) FindOne(ctx context.Context, id int64) (*OfficialMessage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", officialMessageRows, m.table)
	var resp OfficialMessage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOfficialMessageModel) Insert(ctx context.Context, data *OfficialMessage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, officialMessageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Text, data.Image, data.ObjectSid, data.SendAt)
	return ret, err
}

func (m *defaultOfficialMessageModel) Update(ctx context.Context, data *OfficialMessage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, officialMessageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Text, data.Image, data.ObjectSid, data.SendAt, data.Id)
	return err
}

func (m *defaultOfficialMessageModel) tableName() string {
	return m.table
}
